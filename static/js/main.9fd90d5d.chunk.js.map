{"version":3,"sources":["HomePage.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","toggleDirectionsDropdown","setState","directionsDropdownOpen","state","selectDirectionName","e","selectedDirectionName","currentTarget","textContent","selectedFromStation","selectedFromTrain","selectedToStation","arriveAt","populateFromStations","fromStations","directions","filter","direction","label","map","schedule","slice","toggleFromStationsDropdown","fromStationsDropdownOpen","selectFromStation","parseInt","id","populateFromTrains","populateToStations","allTrains","fromTrains","i","length","push","padStart","toggleFromTrainsDropdown","fromTrainsDropdownOpen","selectFromTrain","calculateArrivalTime","toStations","toggleToStationsDropdown","toStationsDropdownOpen","selectToStation","error","isLoaded","this","findDirections","then","Promise","resolve","reject","findFredericksburgNorthboundSchedule","findFredericksburgSouthboundSchedule","findManassasNorthboundSchedule","findManassasSouthboundSchedule","findSchedule","directionName","url","columnCount","index","fetch","result","text","lines","cleanseText","match","data","x","value","findValue","trim","console","log","line","regexp","substring","indexOf","replace","message","style","width","maxWidth","className","ButtonDropdown","isOpen","toggle","DropdownToggle","caret","color","DropdownMenu","DropdownItem","key","onClick","station","train","fontSize","Button","React","Component","Footer","Container","href","target","rel","ReactGA","initialize","pageview","window","location","pathname","search","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9fd90d5d.chunk.js","sourcesContent":["import React from 'react';\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from 'reactstrap';\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            directions: [],\n            directionsDropdownOpen: false,\n            selectedDirectionName: null,\n            fromStations: [],\n            fromStationsDropdownOpen: false,\n            selectedFromStation: null,\n            fromTrains: [],\n            fromTrainsDropdownOpen: false,\n            selectedFromTrain: null,\n            toStations: [],\n            toStationsDropdownOpen: false,\n            selectedToStation: null,\n            arriveAt: null\n        };\n    }\n\n    componentDidMount() {\n        this.findDirections()\n        .then(() => {\n            this.setState({\n                isLoaded: true\n            });\n        });\n    }\n\n    findDirections() {\n        return new Promise((resolve, reject) => {\n            this.findFredericksburgNorthboundSchedule();\n            this.findFredericksburgSouthboundSchedule();\n            this.findManassasNorthboundSchedule();\n            this.findManassasSouthboundSchedule();\n\n            resolve();\n        })\n    }\n\n    findFredericksburgNorthboundSchedule() {\n        this.findSchedule('Fredericksburg Line - Northbound', 'https://www.vre.org/service/schedule/schedule-data/fredericksburg-line-northbound/', 14, 0);\n    }\n\n    findFredericksburgSouthboundSchedule() {\n        this.findSchedule('Fredericksburg Line - Southbound', 'https://www.vre.org/service/schedule/schedule-data/fredericksburg-line-southbound/', 14, 1);\n    }\n\n    findManassasNorthboundSchedule() {\n        this.findSchedule('Manassas Line - Northbound', 'https://www.vre.org/service/schedule/schedule-data/manassas-line-northbound/', 11, 2);\n    }\n\n    findManassasSouthboundSchedule() {\n        this.findSchedule('Manassas Line - Southbound', 'https://www.vre.org/service/schedule/schedule-data/manassas-line-southbound/', 11, 3);\n    }\n\n    findSchedule(directionName, url, columnCount, index) {\n        const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n        // const proxyUrl = 'https://crossorigin.me/';\n\n        fetch(proxyUrl + url)\n            .then(result => result.text())\n            .then(\n                (result) => {\n                    let cleansedResult = this.cleanseText(result);\n\n                    let lines = cleansedResult.match(/[^\\r\\n]+/g);\n\n                    let data = [];\n                    let x = -1;\n\n                    for (var i = 0; i < lines.length; i++) {\n\n                        if (i % columnCount === 0) {\n                            data.push([]);\n                            x++;\n                        }\n\n                        let value = this.findValue(lines[i]).trim();\n                        data[x].push(value);\n                    }\n\n                    let direction = {\n                        label: directionName,\n                        schedule: data\n                    };\n\n                    // this.state.directions.push(direction);\n                    let directions = this.state.directions;\n                    directions[index] = direction;\n                    this.setState({\n                        directions: directions\n                    });\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    console.log('error' + error);\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    // extracts value inside tags\n    // e.g. <td>abc</td> => abc\n    findValue(line) {\n        let regexp = /(?:>)(.*)(?:<)/;\n        let match = line.match(regexp);\n\n        while (match && match[1].match(regexp)) {\n            match = match[1].match(regexp);\n        }\n\n        return match[1];\n    }\n\n    cleanseText(text) {\n        return text.substring(text.indexOf('<table>'), text.indexOf('</table>'))\n            .replace(/<table>(?:\\r\\n|\\r|\\n)/g, '')\n            .replace(/<thead>(?:\\r\\n|\\r|\\n)/g, '')\n            .replace(/<\\/thead>(?:\\r\\n|\\r|\\n)/g, '')\n            .replace(/<tr>(?:\\r\\n|\\r|\\n)/g, '')\n            .replace(/<\\/tr>(?:\\r\\n|\\r|\\n)/g, '')\n            .replace(/<tbody>(?:\\r\\n|\\r|\\n)/g, '')\n            .replace(/<\\/tbody>(?:\\r\\n|\\r|\\n)/g, '')\n            .replace(/<\\/time> a.m./g, ' a.m.</time>')\n            .replace(/<\\/time>&nbsp;a.m./g, ' a.m.</time>')\n            .replace(/<\\/time> p.m./g, ' p.m.</time>')\n            .replace(/<\\/time>&nbsp;p.m./g, ' p.m.</time>')\n            .replace(/a.m./g, 'AM')\n            .replace(/p.m./g, 'PM')\n            .replace(/<span class=\"sched-badge sched-badge-secondary\">L<\\/span>/g, '')\n            .replace(/<span class=\"sched-badge\">B<\\/span>/g, '')\n            .replace(/<span class=\"sched-badge\">S<\\/span>/g, 'S')\n            .replace(/&nbsp;/g, '')\n            .replace(/<a href=\"\\/service\\/amtrak\\/\">/g, '')\n            .replace(/<\\/a><\\/td>/g, '</td>');\n    }\n\n    toggleDirectionsDropdown = () => {\n        this.setState({\n            directionsDropdownOpen: !this.state.directionsDropdownOpen\n        });\n    }\n\n    selectDirectionName = (e) => {\n        this.setState({\n            selectedDirectionName: e.currentTarget.textContent,\n            selectedFromStation: null,\n            selectedFromTrain: null,\n            selectedToStation: null,\n            arriveAt: null\n        },\n            () => { this.populateFromStations(); });\n    }\n\n    populateFromStations = () => {\n        let fromStations = this.state.directions\n            .filter(direction => direction.label === this.state.selectedDirectionName)\n            .map(direction => direction.schedule[0].slice(1))[0];\n        this.setState({\n            fromStations: fromStations,\n            selectedFromStation: null\n        });\n    }\n\n    toggleFromStationsDropdown = () => {\n        this.setState({\n            fromStationsDropdownOpen: !this.state.fromStationsDropdownOpen\n        });\n    }\n\n    selectFromStation = (e) => {\n        this.setState({\n            selectedFromStation: parseInt(e.currentTarget.id),\n            selectedFromTrain: null,\n            selectedToStation: null,\n            arriveAt: null\n        },\n            () => { this.populateFromTrains();\n                this.populateToStations(); });\n    }\n\n    populateFromTrains = () => {\n        let allTrains = this.state.directions\n            .filter(direction => direction.label === this.state.selectedDirectionName)\n            .map(direction => direction.schedule)[0];\n\n        let fromTrains = [];\n        for (let i = 1; i < allTrains.length; i++) {\n            fromTrains.push('[' + allTrains[i][0].padStart(11, ' ') + '] ' + allTrains[i][this.state.selectedFromStation + 1]);\n        }\n        this.setState({\n            fromTrains: fromTrains\n        });\n    }\n\n    toggleFromTrainsDropdown = () => {\n        this.setState({\n            fromTrainsDropdownOpen: !this.state.fromTrainsDropdownOpen\n        });\n    }\n\n    selectFromTrain = (e) => {\n        this.setState({\n            selectedFromTrain: parseInt(e.currentTarget.id),\n            arriveAt: null\n        },\n            () => { \n                if (this.state.selectedToStation) {\n                    this.calculateArrivalTime();\n                } \n            });\n    }\n\n    populateToStations = () => {\n        let toStations = this.state.directions\n            .filter(direction => direction.label === this.state.selectedDirectionName)\n            .map(direction => direction.schedule[0].slice(1))[0]\n            .slice(this.state.selectedFromStation + 1);\n\n        this.setState({\n            toStations: toStations\n        });\n    }\n\n    toggleToStationsDropdown = () => {\n        this.setState({\n            toStationsDropdownOpen: !this.state.toStationsDropdownOpen\n        });\n    }\n\n    selectToStation = (e) => {\n        this.setState({\n            selectedToStation: parseInt(e.currentTarget.id)\n        },\n            () => { this.calculateArrivalTime(); });\n    }\n\n    calculateArrivalTime = () => {\n        let allTrains = this.state.directions\n            .filter(direction => direction.label === this.state.selectedDirectionName)\n            .map(direction => direction.schedule)[0];\n\n        let arriveAt = allTrains[this.state.selectedFromTrain + 1][this.state.selectedFromStation + 1 + this.state.selectedToStation + 1];\n        this.setState({\n            arriveAt: arriveAt\n        });\n    }\n\n    render() {\n        const { error, isLoaded, directions, directionsDropdownOpen, fromStations, fromStationsDropdownOpen, fromTrains, fromTrainsDropdownOpen, toStations, toStationsDropdownOpen, arriveAt } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <div style={{ width: \"300px\", maxWidth: \"300px\" }}>\n                    <div>\n                        <h3>VRE Schedule</h3>\n                    </div>\n                    <div className=\"direction\">\n                        Direction\n\n                        <ButtonDropdown isOpen={directionsDropdownOpen} toggle={this.toggleDirectionsDropdown} style={{ width: \"100%\" }}>\n                            <DropdownToggle caret color=\"primary\">\n                                {this.state.selectedDirectionName}\n                            </DropdownToggle>\n                            <DropdownMenu>\n                                {directions.map(direction => (\n                                    <DropdownItem id={direction.label} key={direction.label} onClick={this.selectDirectionName}>{direction.label}</DropdownItem>\n                                ))}\n                            </DropdownMenu>\n                        </ButtonDropdown>\n                    </div>\n\n                    <div className=\"from-station\">\n                        From Station\n                        <ButtonDropdown isOpen={fromStationsDropdownOpen} toggle={this.toggleFromStationsDropdown} style={{ width: \"100%\" }}>\n                            <DropdownToggle caret>\n                                {fromStations[this.state.selectedFromStation]}\n                            </DropdownToggle>\n                            <DropdownMenu>\n                                {fromStations.map((station, index) => (\n                                    <DropdownItem id={index} key={index} onClick={this.selectFromStation}>{station}</DropdownItem>\n                                ))}\n                            </DropdownMenu>\n                        </ButtonDropdown>\n\n                    </div>\n\n                    <div className=\"from-train\">\n                        Depart At\n                        <ButtonDropdown isOpen={fromTrainsDropdownOpen} toggle={this.toggleFromTrainsDropdown} style={{ width: \"100%\" }}>\n                            <DropdownToggle caret>\n                                {fromTrains[this.state.selectedFromTrain]}\n                            </DropdownToggle>\n                            <DropdownMenu>\n                                {fromTrains.map((train, index) => (\n                                    <DropdownItem id={index} key={index} onClick={this.selectFromTrain}><pre>{train}</pre></DropdownItem>\n                                ))}\n                            </DropdownMenu>\n                        </ButtonDropdown>\n                        <span style={{fontSize: \"0.5em\"}}>S = Special schedules for holidays and snow days</span>\n                    </div>\n\n                    <div className=\"to-station\">\n                        To Station\n                        <ButtonDropdown isOpen={toStationsDropdownOpen} toggle={this.toggleToStationsDropdown} style={{ width: \"100%\" }}>\n                            <DropdownToggle caret color=\"success\">\n                                {toStations[this.state.selectedToStation]}\n                            </DropdownToggle>\n                            <DropdownMenu>\n                                {toStations.map((station, index) => (\n                                    <DropdownItem id={index} key={index} onClick={this.selectToStation}>{station}</DropdownItem>\n                                ))}\n                            </DropdownMenu>\n                        </ButtonDropdown>\n                    </div>\n\n                    <div className=\"arrive-at\">\n                        <div>\n                            Arrive At\n                        </div>\n                        <Button color=\"success\" style={{ width: \"100%\" }}>{arriveAt}</Button>\n                    </div>\n                </div>\n\n\n            );\n        }\n    }\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport { Container } from \"reactstrap\";\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        <Container>\n          <div>\n            I'm a software engineer and ex-VRE rider. I built this just to\n            provide a better user experience for VRE riders.\n          </div>\n          <div>\n            This data may go out of date when VRE website changes the layout, so please use this at your own risk.\n            Official VRE website: <a href=\"https://www.vre.org\" target=\"_blank\" rel=\"noopener noreferrer\">vre.org</a>\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport HomePage from './HomePage';\nimport Footer from \"./Footer\";\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-115168467-3');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HomePage />\n      </header>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}